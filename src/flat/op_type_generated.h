// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_OPTYPE_H_
#define FLATBUFFERS_GENERATED_OPTYPE_H_

#include "flatbuffers/flatbuffers.h"

enum OpType {
  OpType_Unkown = 0,
  OpType_Nop = 1,
  OpType_Convert = 2,
  OpType_Crop = 3,
  OpType_Scale = 4,
  OpType_Power = 5,
  OpType_Relu6 = 6,
  OpType_Abs = 1000,
  OpType_Acos = 1001,
  OpType_Acosh = 1002,
  OpType_Add = 1003,
  OpType_And = 1004,
  OpType_ArgMax = 1005,
  OpType_ArgMin = 1006,
  OpType_Asin = 1007,
  OpType_Asinh = 1008,
  OpType_Atan = 1009,
  OpType_Atanh = 1010,
  OpType_AveragePool = 1011,
  OpType_BatchNormalization = 1012,
  OpType_BitShift = 1013,
  OpType_Cast = 1014,
  OpType_Ceil = 1015,
  OpType_Clip = 1016,
  OpType_Compress = 1017,
  OpType_Concat = 1018,
  OpType_ConcatFromSequence = 1019,
  OpType_Constant = 1020,
  OpType_ConstantOfShape = 1021,
  OpType_Conv = 1022,
  OpType_ConvInteger = 1023,
  OpType_ConvTranspose = 1024,
  OpType_Cos = 1025,
  OpType_Cosh = 1026,
  OpType_CumSum = 1027,
  OpType_DepthToSpace = 1028,
  OpType_DequantizeLinear = 1029,
  OpType_Det = 1030,
  OpType_Div = 1031,
  OpType_Dropout = 1032,
  OpType_Elu = 1033,
  OpType_Equal = 1034,
  OpType_Erf = 1035,
  OpType_Exp = 1036,
  OpType_Expand = 1037,
  OpType_EyeLike = 1038,
  OpType_Flatten = 1039,
  OpType_Floor = 1040,
  OpType_GRU = 1041,
  OpType_Gather = 1042,
  OpType_GatherElements = 1043,
  OpType_GatherND = 1044,
  OpType_Gemm = 1045,
  OpType_GlobalAveragePool = 1046,
  OpType_GlobalLpPool = 1047,
  OpType_GlobalMaxPool = 1048,
  OpType_Greater = 1049,
  OpType_HardSigmoid = 1050,
  OpType_Hardmax = 1051,
  OpType_Identity = 1052,
  OpType_If = 1053,
  OpType_InstanceNormalization = 1054,
  OpType_IsInf = 1055,
  OpType_IsNaN = 1056,
  OpType_LRN = 1057,
  OpType_LSTM = 1058,
  OpType_LeakyRelu = 1059,
  OpType_Less = 1060,
  OpType_Log = 1061,
  OpType_LogSoftmax = 1062,
  OpType_Loop = 1063,
  OpType_LpNormalization = 1064,
  OpType_LpPool = 1065,
  OpType_MatMul = 1066,
  OpType_MatMulInteger = 1067,
  OpType_Max = 1068,
  OpType_MaxPool = 1069,
  OpType_MaxRoiPool = 1070,
  OpType_MaxUnpool = 1071,
  OpType_Mean = 1072,
  OpType_Min = 1073,
  OpType_Mod = 1074,
  OpType_Mul = 1075,
  OpType_Multinomial = 1076,
  OpType_Neg = 1077,
  OpType_NonMaxSuppression = 1078,
  OpType_NonZero = 1079,
  OpType_Not = 1080,
  OpType_OneHot = 1081,
  OpType_Or = 1082,
  OpType_PRelu = 1083,
  OpType_Pad = 1084,
  OpType_Pow = 1085,
  OpType_QLinearConv = 1086,
  OpType_QLinearMatMul = 1087,
  OpType_QuantizeLinear = 1088,
  OpType_RNN = 1089,
  OpType_RandomNormal = 1090,
  OpType_RandomNormalLike = 1091,
  OpType_RandomUniform = 1092,
  OpType_RandomUniformLike = 1093,
  OpType_Reciprocal = 1094,
  OpType_ReduceL1 = 1095,
  OpType_ReduceL2 = 1096,
  OpType_ReduceLogSum = 1097,
  OpType_ReduceLogSumExp = 1098,
  OpType_ReduceMax = 1099,
  OpType_ReduceMean = 1100,
  OpType_ReduceMin = 1101,
  OpType_ReduceProd = 1102,
  OpType_ReduceSum = 1103,
  OpType_ReduceSumSquare = 1104,
  OpType_Relu = 1105,
  OpType_Reshape = 1106,
  OpType_Resize = 1107,
  OpType_ReverseSequence = 1108,
  OpType_RoiAlign = 1109,
  OpType_Round = 1110,
  OpType_Scan = 1111,
  OpType_Scatter = 1112,
  OpType_ScatterElements = 1113,
  OpType_ScatterND = 1114,
  OpType_Selu = 1115,
  OpType_SequenceAt = 1116,
  OpType_SequenceConstruct = 1117,
  OpType_SequenceEmpty = 1118,
  OpType_SequenceErase = 1119,
  OpType_SequenceInsert = 1120,
  OpType_SequenceLength = 1121,
  OpType_Shape = 1122,
  OpType_Shrink = 1123,
  OpType_Sigmoid = 1124,
  OpType_Sign = 1125,
  OpType_Sin = 1126,
  OpType_Sinh = 1127,
  OpType_Size = 1128,
  OpType_Slice = 1129,
  OpType_Softmax = 1130,
  OpType_Softplus = 1131,
  OpType_Softsign = 1132,
  OpType_SpaceToDepth = 1133,
  OpType_Split = 1134,
  OpType_SplitToSequence = 1135,
  OpType_Sqrt = 1136,
  OpType_Squeeze = 1137,
  OpType_StringNormalizer = 1138,
  OpType_Sub = 1139,
  OpType_Sum = 1140,
  OpType_Tan = 1141,
  OpType_Tanh = 1142,
  OpType_TfIdfVectorizer = 1143,
  OpType_ThresholdedRelu = 1144,
  OpType_Tile = 1145,
  OpType_TopK = 1146,
  OpType_Transpose = 1147,
  OpType_Unique = 1148,
  OpType_Unsqueeze = 1149,
  OpType_Upsample = 1150,
  OpType_Where = 1151,
  OpType_Xor = 1152,
  OpType_MVN = 1153,
  OpType_Priobox = 2000,
  OpType_ShuffleChannel = 2001,
  OpType_MIN = OpType_Unkown,
  OpType_MAX = OpType_ShuffleChannel
};

inline const OpType (&EnumValuesOpType())[163] {
  static const OpType values[] = {
    OpType_Unkown,
    OpType_Nop,
    OpType_Convert,
    OpType_Crop,
    OpType_Scale,
    OpType_Power,
    OpType_Relu6,
    OpType_Abs,
    OpType_Acos,
    OpType_Acosh,
    OpType_Add,
    OpType_And,
    OpType_ArgMax,
    OpType_ArgMin,
    OpType_Asin,
    OpType_Asinh,
    OpType_Atan,
    OpType_Atanh,
    OpType_AveragePool,
    OpType_BatchNormalization,
    OpType_BitShift,
    OpType_Cast,
    OpType_Ceil,
    OpType_Clip,
    OpType_Compress,
    OpType_Concat,
    OpType_ConcatFromSequence,
    OpType_Constant,
    OpType_ConstantOfShape,
    OpType_Conv,
    OpType_ConvInteger,
    OpType_ConvTranspose,
    OpType_Cos,
    OpType_Cosh,
    OpType_CumSum,
    OpType_DepthToSpace,
    OpType_DequantizeLinear,
    OpType_Det,
    OpType_Div,
    OpType_Dropout,
    OpType_Elu,
    OpType_Equal,
    OpType_Erf,
    OpType_Exp,
    OpType_Expand,
    OpType_EyeLike,
    OpType_Flatten,
    OpType_Floor,
    OpType_GRU,
    OpType_Gather,
    OpType_GatherElements,
    OpType_GatherND,
    OpType_Gemm,
    OpType_GlobalAveragePool,
    OpType_GlobalLpPool,
    OpType_GlobalMaxPool,
    OpType_Greater,
    OpType_HardSigmoid,
    OpType_Hardmax,
    OpType_Identity,
    OpType_If,
    OpType_InstanceNormalization,
    OpType_IsInf,
    OpType_IsNaN,
    OpType_LRN,
    OpType_LSTM,
    OpType_LeakyRelu,
    OpType_Less,
    OpType_Log,
    OpType_LogSoftmax,
    OpType_Loop,
    OpType_LpNormalization,
    OpType_LpPool,
    OpType_MatMul,
    OpType_MatMulInteger,
    OpType_Max,
    OpType_MaxPool,
    OpType_MaxRoiPool,
    OpType_MaxUnpool,
    OpType_Mean,
    OpType_Min,
    OpType_Mod,
    OpType_Mul,
    OpType_Multinomial,
    OpType_Neg,
    OpType_NonMaxSuppression,
    OpType_NonZero,
    OpType_Not,
    OpType_OneHot,
    OpType_Or,
    OpType_PRelu,
    OpType_Pad,
    OpType_Pow,
    OpType_QLinearConv,
    OpType_QLinearMatMul,
    OpType_QuantizeLinear,
    OpType_RNN,
    OpType_RandomNormal,
    OpType_RandomNormalLike,
    OpType_RandomUniform,
    OpType_RandomUniformLike,
    OpType_Reciprocal,
    OpType_ReduceL1,
    OpType_ReduceL2,
    OpType_ReduceLogSum,
    OpType_ReduceLogSumExp,
    OpType_ReduceMax,
    OpType_ReduceMean,
    OpType_ReduceMin,
    OpType_ReduceProd,
    OpType_ReduceSum,
    OpType_ReduceSumSquare,
    OpType_Relu,
    OpType_Reshape,
    OpType_Resize,
    OpType_ReverseSequence,
    OpType_RoiAlign,
    OpType_Round,
    OpType_Scan,
    OpType_Scatter,
    OpType_ScatterElements,
    OpType_ScatterND,
    OpType_Selu,
    OpType_SequenceAt,
    OpType_SequenceConstruct,
    OpType_SequenceEmpty,
    OpType_SequenceErase,
    OpType_SequenceInsert,
    OpType_SequenceLength,
    OpType_Shape,
    OpType_Shrink,
    OpType_Sigmoid,
    OpType_Sign,
    OpType_Sin,
    OpType_Sinh,
    OpType_Size,
    OpType_Slice,
    OpType_Softmax,
    OpType_Softplus,
    OpType_Softsign,
    OpType_SpaceToDepth,
    OpType_Split,
    OpType_SplitToSequence,
    OpType_Sqrt,
    OpType_Squeeze,
    OpType_StringNormalizer,
    OpType_Sub,
    OpType_Sum,
    OpType_Tan,
    OpType_Tanh,
    OpType_TfIdfVectorizer,
    OpType_ThresholdedRelu,
    OpType_Tile,
    OpType_TopK,
    OpType_Transpose,
    OpType_Unique,
    OpType_Unsqueeze,
    OpType_Upsample,
    OpType_Where,
    OpType_Xor,
    OpType_MVN,
    OpType_Priobox,
    OpType_ShuffleChannel
  };
  return values;
}

inline const char *EnumNameOpType(OpType e) {
  switch (e) {
    case OpType_Unkown: return "Unkown";
    case OpType_Nop: return "Nop";
    case OpType_Convert: return "Convert";
    case OpType_Crop: return "Crop";
    case OpType_Scale: return "Scale";
    case OpType_Power: return "Power";
    case OpType_Relu6: return "Relu6";
    case OpType_Abs: return "Abs";
    case OpType_Acos: return "Acos";
    case OpType_Acosh: return "Acosh";
    case OpType_Add: return "Add";
    case OpType_And: return "And";
    case OpType_ArgMax: return "ArgMax";
    case OpType_ArgMin: return "ArgMin";
    case OpType_Asin: return "Asin";
    case OpType_Asinh: return "Asinh";
    case OpType_Atan: return "Atan";
    case OpType_Atanh: return "Atanh";
    case OpType_AveragePool: return "AveragePool";
    case OpType_BatchNormalization: return "BatchNormalization";
    case OpType_BitShift: return "BitShift";
    case OpType_Cast: return "Cast";
    case OpType_Ceil: return "Ceil";
    case OpType_Clip: return "Clip";
    case OpType_Compress: return "Compress";
    case OpType_Concat: return "Concat";
    case OpType_ConcatFromSequence: return "ConcatFromSequence";
    case OpType_Constant: return "Constant";
    case OpType_ConstantOfShape: return "ConstantOfShape";
    case OpType_Conv: return "Conv";
    case OpType_ConvInteger: return "ConvInteger";
    case OpType_ConvTranspose: return "ConvTranspose";
    case OpType_Cos: return "Cos";
    case OpType_Cosh: return "Cosh";
    case OpType_CumSum: return "CumSum";
    case OpType_DepthToSpace: return "DepthToSpace";
    case OpType_DequantizeLinear: return "DequantizeLinear";
    case OpType_Det: return "Det";
    case OpType_Div: return "Div";
    case OpType_Dropout: return "Dropout";
    case OpType_Elu: return "Elu";
    case OpType_Equal: return "Equal";
    case OpType_Erf: return "Erf";
    case OpType_Exp: return "Exp";
    case OpType_Expand: return "Expand";
    case OpType_EyeLike: return "EyeLike";
    case OpType_Flatten: return "Flatten";
    case OpType_Floor: return "Floor";
    case OpType_GRU: return "GRU";
    case OpType_Gather: return "Gather";
    case OpType_GatherElements: return "GatherElements";
    case OpType_GatherND: return "GatherND";
    case OpType_Gemm: return "Gemm";
    case OpType_GlobalAveragePool: return "GlobalAveragePool";
    case OpType_GlobalLpPool: return "GlobalLpPool";
    case OpType_GlobalMaxPool: return "GlobalMaxPool";
    case OpType_Greater: return "Greater";
    case OpType_HardSigmoid: return "HardSigmoid";
    case OpType_Hardmax: return "Hardmax";
    case OpType_Identity: return "Identity";
    case OpType_If: return "If";
    case OpType_InstanceNormalization: return "InstanceNormalization";
    case OpType_IsInf: return "IsInf";
    case OpType_IsNaN: return "IsNaN";
    case OpType_LRN: return "LRN";
    case OpType_LSTM: return "LSTM";
    case OpType_LeakyRelu: return "LeakyRelu";
    case OpType_Less: return "Less";
    case OpType_Log: return "Log";
    case OpType_LogSoftmax: return "LogSoftmax";
    case OpType_Loop: return "Loop";
    case OpType_LpNormalization: return "LpNormalization";
    case OpType_LpPool: return "LpPool";
    case OpType_MatMul: return "MatMul";
    case OpType_MatMulInteger: return "MatMulInteger";
    case OpType_Max: return "Max";
    case OpType_MaxPool: return "MaxPool";
    case OpType_MaxRoiPool: return "MaxRoiPool";
    case OpType_MaxUnpool: return "MaxUnpool";
    case OpType_Mean: return "Mean";
    case OpType_Min: return "Min";
    case OpType_Mod: return "Mod";
    case OpType_Mul: return "Mul";
    case OpType_Multinomial: return "Multinomial";
    case OpType_Neg: return "Neg";
    case OpType_NonMaxSuppression: return "NonMaxSuppression";
    case OpType_NonZero: return "NonZero";
    case OpType_Not: return "Not";
    case OpType_OneHot: return "OneHot";
    case OpType_Or: return "Or";
    case OpType_PRelu: return "PRelu";
    case OpType_Pad: return "Pad";
    case OpType_Pow: return "Pow";
    case OpType_QLinearConv: return "QLinearConv";
    case OpType_QLinearMatMul: return "QLinearMatMul";
    case OpType_QuantizeLinear: return "QuantizeLinear";
    case OpType_RNN: return "RNN";
    case OpType_RandomNormal: return "RandomNormal";
    case OpType_RandomNormalLike: return "RandomNormalLike";
    case OpType_RandomUniform: return "RandomUniform";
    case OpType_RandomUniformLike: return "RandomUniformLike";
    case OpType_Reciprocal: return "Reciprocal";
    case OpType_ReduceL1: return "ReduceL1";
    case OpType_ReduceL2: return "ReduceL2";
    case OpType_ReduceLogSum: return "ReduceLogSum";
    case OpType_ReduceLogSumExp: return "ReduceLogSumExp";
    case OpType_ReduceMax: return "ReduceMax";
    case OpType_ReduceMean: return "ReduceMean";
    case OpType_ReduceMin: return "ReduceMin";
    case OpType_ReduceProd: return "ReduceProd";
    case OpType_ReduceSum: return "ReduceSum";
    case OpType_ReduceSumSquare: return "ReduceSumSquare";
    case OpType_Relu: return "Relu";
    case OpType_Reshape: return "Reshape";
    case OpType_Resize: return "Resize";
    case OpType_ReverseSequence: return "ReverseSequence";
    case OpType_RoiAlign: return "RoiAlign";
    case OpType_Round: return "Round";
    case OpType_Scan: return "Scan";
    case OpType_Scatter: return "Scatter";
    case OpType_ScatterElements: return "ScatterElements";
    case OpType_ScatterND: return "ScatterND";
    case OpType_Selu: return "Selu";
    case OpType_SequenceAt: return "SequenceAt";
    case OpType_SequenceConstruct: return "SequenceConstruct";
    case OpType_SequenceEmpty: return "SequenceEmpty";
    case OpType_SequenceErase: return "SequenceErase";
    case OpType_SequenceInsert: return "SequenceInsert";
    case OpType_SequenceLength: return "SequenceLength";
    case OpType_Shape: return "Shape";
    case OpType_Shrink: return "Shrink";
    case OpType_Sigmoid: return "Sigmoid";
    case OpType_Sign: return "Sign";
    case OpType_Sin: return "Sin";
    case OpType_Sinh: return "Sinh";
    case OpType_Size: return "Size";
    case OpType_Slice: return "Slice";
    case OpType_Softmax: return "Softmax";
    case OpType_Softplus: return "Softplus";
    case OpType_Softsign: return "Softsign";
    case OpType_SpaceToDepth: return "SpaceToDepth";
    case OpType_Split: return "Split";
    case OpType_SplitToSequence: return "SplitToSequence";
    case OpType_Sqrt: return "Sqrt";
    case OpType_Squeeze: return "Squeeze";
    case OpType_StringNormalizer: return "StringNormalizer";
    case OpType_Sub: return "Sub";
    case OpType_Sum: return "Sum";
    case OpType_Tan: return "Tan";
    case OpType_Tanh: return "Tanh";
    case OpType_TfIdfVectorizer: return "TfIdfVectorizer";
    case OpType_ThresholdedRelu: return "ThresholdedRelu";
    case OpType_Tile: return "Tile";
    case OpType_TopK: return "TopK";
    case OpType_Transpose: return "Transpose";
    case OpType_Unique: return "Unique";
    case OpType_Unsqueeze: return "Unsqueeze";
    case OpType_Upsample: return "Upsample";
    case OpType_Where: return "Where";
    case OpType_Xor: return "Xor";
    case OpType_MVN: return "MVN";
    case OpType_Priobox: return "Priobox";
    case OpType_ShuffleChannel: return "ShuffleChannel";
    default: return "";
  }
}

#endif  // FLATBUFFERS_GENERATED_OPTYPE_H_
